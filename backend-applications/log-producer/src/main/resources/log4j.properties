##########################################################################################
# log4j.rootLogger 对格式有要求：LogLevel,appender1,appender2...
log4j.rootLogger=trace,console
###########################自定义日志对象#############################################
# 指定类输出日志到文件中
log4j.logger.cn.tiakon.app.java.lp.example=info,file
###########################输出日志到控制台#############################################
log4j.appender.console=org.apache.log4j.ConsoleAppender
#log4j.appender.console.layout=org.apache.log4j.SimpleLayout
#log4j.appender.console.layout=org.apache.log4j.HTMLLayout
#log4j.appender.console.layout=org.apache.log4j.xml.XMLLayout
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss.SSS} %-6p %-20c{2} [%L] >> %m%n
###########################输出日志到文件###############################################
log4j.appender.file=org.apache.log4j.FileAppender
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %p %c: %m%n
log4j.appender.file.File=logs/log.out
log4j.appender.file.Append=true
log4j.appender.file.Encoding=UTF-8
###########################按文件大小分割日志文件#########################################
log4j.appender.rollingFile=org.apache.log4j.RollingFileAppender
log4j.appender.rollingFile.layout=org.apache.log4j.PatternLayout
log4j.appender.rollingFile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %p %c: %m%n
log4j.appender.rollingFile.File=logs/rolling-log.out
log4j.appender.rollingFile.Append=true
log4j.appender.rollingFile.Encoding=UTF-8
log4j.appender.rollingFile.maxFileSize=50KB
# 指定日志文件数量，并限制在10以内，超过10个按时间大小覆盖
log4j.appender.rollingFile.maxBackupIndex=10
###########################按时间规则分割日志文件#########################################
log4j.appender.dailyFile=org.apache.log4j.DailyRollingFileAppender
log4j.appender.dailyFile.File=logs/daily-log.out
log4j.appender.dailyFile.Append=true
log4j.appender.dailyFile.Encoding=UTF-8
#定义的时间格式，如果时间定义到分钟（mm）就是每分钟生成一个日志文件，而这里定义的这个格式就是日志名后缀
fileNameDate='_'yyyyMMddHHmmss'.log'
log4j.appender.dailyFile.DatePattern=${fileNameDate}
#控制当前日志输出级别
log4j.appender.dailyFile.Threshold=INFO
log4j.appender.dailyFile.layout=org.apache.log4j.PatternLayout
log4j.appender.dailyFile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %p %c: %m%n
##########################################################################################
# log4j 采用类似 C 语言的 printf 函数的打印格式格式化日志信息，具体的占位符及其含义如下：
# %m 输出代码中指定的日志信息
# %p 输出优先级，及 DEBUG、INFO 等
# %n 换行符（Windows平台的换行符为 "\n"，Unix 平台为 "\n"）
# %r 输出自应用启动到输出该 log 信息耗费的毫秒数
# %c 输出打印语句所属的类的全名
# %t 输出产生该日志的线程全名
# %d 输出服务器当前时间，默认为 ISO8601，也可以指定格式，如：%d{yyyy-MM-dd HH:mm:ss.SSS}
# %l 输出日志时间发生的位置，包括类名、线程、及在代码中的行数。如：Test.main(Test.java:10)
# %F 输出日志消息产生时所在的文件名称
# %L 输出代码中的行号
# %% 输出一个 "%" 字符可以在 % 与字符之间加上修饰符来控制最小宽度、最大宽度和文本的对其方式。如：
# %5c 输出category名称，最小宽度是5，category<5，默认的情况下右对齐
# %-5c 输出category名称，最小宽度是5，category<5，"-"号指定左对齐,会有空格
# %.5c 输出category名称，最大宽度是5，category>5，就会将左边多出的字符截掉，<5不会有空格
# %20.30c category名称<20补空格，并且右对齐，>30字符，就从左边交远销出的字符截掉